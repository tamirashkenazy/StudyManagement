{"ast":null,"code":"var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike'),\n    isPlainObject = require('./isPlainObject');\n/** `Object#toString` result references. */\n\n\nvar domExcTag = '[object DOMException]',\n    errorTag = '[object Error]';\n/**\r\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\r\n * `SyntaxError`, `TypeError`, or `URIError` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\r\n * @example\r\n *\r\n * _.isError(new Error);\r\n * // => true\r\n *\r\n * _.isError(Error);\r\n * // => false\r\n */\n\nfunction isError(value) {\n  if (!isObjectLike(value)) {\n    return false;\n  }\n\n  var tag = baseGetTag(value);\n  return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);\n}\n\nmodule.exports = isError;","map":{"version":3,"sources":["C:/Projects/StudyManagement/client/node_modules/lodash/isError.js"],"names":["baseGetTag","require","isObjectLike","isPlainObject","domExcTag","errorTag","isError","value","tag","message","name","module","exports"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAAxB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAD1B;AAAA,IAEIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAF3B;AAIA;;;AACA,IAAIG,SAAS,GAAG,uBAAhB;AAAA,IACIC,QAAQ,GAAG,gBADf;AAGA;;;;;;;;;;;;;;;;;;;AAkBA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAI,CAACL,YAAY,CAACK,KAAD,CAAjB,EAA0B;AACxB,WAAO,KAAP;AACD;;AACD,MAAIC,GAAG,GAAGR,UAAU,CAACO,KAAD,CAApB;AACA,SAAOC,GAAG,IAAIH,QAAP,IAAmBG,GAAG,IAAIJ,SAA1B,IACJ,OAAOG,KAAK,CAACE,OAAb,IAAwB,QAAxB,IAAoC,OAAOF,KAAK,CAACG,IAAb,IAAqB,QAAzD,IAAqE,CAACP,aAAa,CAACI,KAAD,CADtF;AAED;;AAEDI,MAAM,CAACC,OAAP,GAAiBN,OAAjB","sourcesContent":["var baseGetTag = require('./_baseGetTag'),\r\n    isObjectLike = require('./isObjectLike'),\r\n    isPlainObject = require('./isPlainObject');\r\n\r\n/** `Object#toString` result references. */\r\nvar domExcTag = '[object DOMException]',\r\n    errorTag = '[object Error]';\r\n\r\n/**\r\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\r\n * `SyntaxError`, `TypeError`, or `URIError` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\r\n * @example\r\n *\r\n * _.isError(new Error);\r\n * // => true\r\n *\r\n * _.isError(Error);\r\n * // => false\r\n */\r\nfunction isError(value) {\r\n  if (!isObjectLike(value)) {\r\n    return false;\r\n  }\r\n  var tag = baseGetTag(value);\r\n  return tag == errorTag || tag == domExcTag ||\r\n    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\r\n}\r\n\r\nmodule.exports = isError;\r\n"]},"metadata":{},"sourceType":"script"}