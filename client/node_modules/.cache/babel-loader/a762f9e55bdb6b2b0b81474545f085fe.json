{"ast":null,"code":"var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isIterateeCall = require('./_isIterateeCall'),\n    isRegExp = require('./isRegExp'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n/** Used as references for the maximum length and index of an array. */\n\n\nvar MAX_ARRAY_LENGTH = 4294967295;\n/**\r\n * Splits `string` by `separator`.\r\n *\r\n * **Note:** This method is based on\r\n * [`String#split`](https://mdn.io/String/split).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to split.\r\n * @param {RegExp|string} separator The separator pattern to split by.\r\n * @param {number} [limit] The length to truncate results to.\r\n * @returns {Array} Returns the string segments.\r\n * @example\r\n *\r\n * _.split('a-b-c', '-', 2);\r\n * // => ['a', 'b']\r\n */\n\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n\n  if (!limit) {\n    return [];\n  }\n\n  string = toString(string);\n\n  if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {\n    separator = baseToString(separator);\n\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n\n  return string.split(separator, limit);\n}\n\nmodule.exports = split;","map":{"version":3,"sources":["C:/Projects/StudyManagement/client/node_modules/lodash/split.js"],"names":["baseToString","require","castSlice","hasUnicode","isIterateeCall","isRegExp","stringToArray","toString","MAX_ARRAY_LENGTH","split","string","separator","limit","undefined","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;AAAA,IACIC,SAAS,GAAGD,OAAO,CAAC,cAAD,CADvB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,eAAD,CAFxB;AAAA,IAGIG,cAAc,GAAGH,OAAO,CAAC,mBAAD,CAH5B;AAAA,IAIII,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAJtB;AAAA,IAKIK,aAAa,GAAGL,OAAO,CAAC,kBAAD,CAL3B;AAAA,IAMIM,QAAQ,GAAGN,OAAO,CAAC,YAAD,CANtB;AAQA;;;AACA,IAAIO,gBAAgB,GAAG,UAAvB;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,KAAT,CAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyC;AACvC,MAAIA,KAAK,IAAI,OAAOA,KAAP,IAAgB,QAAzB,IAAqCR,cAAc,CAACM,MAAD,EAASC,SAAT,EAAoBC,KAApB,CAAvD,EAAmF;AACjFD,IAAAA,SAAS,GAAGC,KAAK,GAAGC,SAApB;AACD;;AACDD,EAAAA,KAAK,GAAGA,KAAK,KAAKC,SAAV,GAAsBL,gBAAtB,GAAyCI,KAAK,KAAK,CAA3D;;AACA,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AACDF,EAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAD,CAAjB;;AACA,MAAIA,MAAM,KACJ,OAAOC,SAAP,IAAoB,QAApB,IACCA,SAAS,IAAI,IAAb,IAAqB,CAACN,QAAQ,CAACM,SAAD,CAF3B,CAAV,EAGO;AACLA,IAAAA,SAAS,GAAGX,YAAY,CAACW,SAAD,CAAxB;;AACA,QAAI,CAACA,SAAD,IAAcR,UAAU,CAACO,MAAD,CAA5B,EAAsC;AACpC,aAAOR,SAAS,CAACI,aAAa,CAACI,MAAD,CAAd,EAAwB,CAAxB,EAA2BE,KAA3B,CAAhB;AACD;AACF;;AACD,SAAOF,MAAM,CAACD,KAAP,CAAaE,SAAb,EAAwBC,KAAxB,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBN,KAAjB","sourcesContent":["var baseToString = require('./_baseToString'),\r\n    castSlice = require('./_castSlice'),\r\n    hasUnicode = require('./_hasUnicode'),\r\n    isIterateeCall = require('./_isIterateeCall'),\r\n    isRegExp = require('./isRegExp'),\r\n    stringToArray = require('./_stringToArray'),\r\n    toString = require('./toString');\r\n\r\n/** Used as references for the maximum length and index of an array. */\r\nvar MAX_ARRAY_LENGTH = 4294967295;\r\n\r\n/**\r\n * Splits `string` by `separator`.\r\n *\r\n * **Note:** This method is based on\r\n * [`String#split`](https://mdn.io/String/split).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to split.\r\n * @param {RegExp|string} separator The separator pattern to split by.\r\n * @param {number} [limit] The length to truncate results to.\r\n * @returns {Array} Returns the string segments.\r\n * @example\r\n *\r\n * _.split('a-b-c', '-', 2);\r\n * // => ['a', 'b']\r\n */\r\nfunction split(string, separator, limit) {\r\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\r\n    separator = limit = undefined;\r\n  }\r\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\r\n  if (!limit) {\r\n    return [];\r\n  }\r\n  string = toString(string);\r\n  if (string && (\r\n        typeof separator == 'string' ||\r\n        (separator != null && !isRegExp(separator))\r\n      )) {\r\n    separator = baseToString(separator);\r\n    if (!separator && hasUnicode(string)) {\r\n      return castSlice(stringToArray(string), 0, limit);\r\n    }\r\n  }\r\n  return string.split(separator, limit);\r\n}\r\n\r\nmodule.exports = split;\r\n"]},"metadata":{},"sourceType":"script"}