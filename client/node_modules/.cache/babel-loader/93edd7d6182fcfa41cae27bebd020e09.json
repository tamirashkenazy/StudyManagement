{"ast":null,"code":"var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n/** Used as references for various `Number` constants. */\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used as references for the maximum length and index of an array. */\n\nvar MAX_ARRAY_LENGTH = 4294967295;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMin = Math.min;\n/**\r\n * Invokes the iteratee `n` times, returning an array of the results of\r\n * each invocation. The iteratee is invoked with one argument; (index).\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Util\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n * @example\r\n *\r\n * _.times(3, String);\r\n * // => ['0', '1', '2']\r\n *\r\n *  _.times(4, _.constant(0));\r\n * // => [0, 0, 0, 0]\r\n */\n\nfunction times(n, iteratee) {\n  n = toInteger(n);\n\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n  var result = baseTimes(length, iteratee);\n\n  while (++index < n) {\n    iteratee(index);\n  }\n\n  return result;\n}\n\nmodule.exports = times;","map":{"version":3,"sources":["C:/Projects/StudyManagement/client/node_modules/lodash/times.js"],"names":["baseTimes","require","castFunction","toInteger","MAX_SAFE_INTEGER","MAX_ARRAY_LENGTH","nativeMin","Math","min","times","n","iteratee","index","length","result","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAD1B;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAFvB;AAIA;;;AACA,IAAIG,gBAAgB,GAAG,gBAAvB;AAEA;;AACA,IAAIC,gBAAgB,GAAG,UAAvB;AAEA;;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,KAAT,CAAeC,CAAf,EAAkBC,QAAlB,EAA4B;AAC1BD,EAAAA,CAAC,GAAGP,SAAS,CAACO,CAAD,CAAb;;AACA,MAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGN,gBAAjB,EAAmC;AACjC,WAAO,EAAP;AACD;;AACD,MAAIQ,KAAK,GAAGP,gBAAZ;AAAA,MACIQ,MAAM,GAAGP,SAAS,CAACI,CAAD,EAAIL,gBAAJ,CADtB;AAGAM,EAAAA,QAAQ,GAAGT,YAAY,CAACS,QAAD,CAAvB;AACAD,EAAAA,CAAC,IAAIL,gBAAL;AAEA,MAAIS,MAAM,GAAGd,SAAS,CAACa,MAAD,EAASF,QAAT,CAAtB;;AACA,SAAO,EAAEC,KAAF,GAAUF,CAAjB,EAAoB;AAClBC,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACD;;AACD,SAAOE,MAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBP,KAAjB","sourcesContent":["var baseTimes = require('./_baseTimes'),\r\n    castFunction = require('./_castFunction'),\r\n    toInteger = require('./toInteger');\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/** Used as references for the maximum length and index of an array. */\r\nvar MAX_ARRAY_LENGTH = 4294967295;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMin = Math.min;\r\n\r\n/**\r\n * Invokes the iteratee `n` times, returning an array of the results of\r\n * each invocation. The iteratee is invoked with one argument; (index).\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Util\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n * @example\r\n *\r\n * _.times(3, String);\r\n * // => ['0', '1', '2']\r\n *\r\n *  _.times(4, _.constant(0));\r\n * // => [0, 0, 0, 0]\r\n */\r\nfunction times(n, iteratee) {\r\n  n = toInteger(n);\r\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\r\n    return [];\r\n  }\r\n  var index = MAX_ARRAY_LENGTH,\r\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\r\n\r\n  iteratee = castFunction(iteratee);\r\n  n -= MAX_ARRAY_LENGTH;\r\n\r\n  var result = baseTimes(length, iteratee);\r\n  while (++index < n) {\r\n    iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = times;\r\n"]},"metadata":{},"sourceType":"script"}