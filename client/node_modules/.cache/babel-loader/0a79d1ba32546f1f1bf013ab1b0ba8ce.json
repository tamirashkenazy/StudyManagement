{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport { numberToWord } from './numberToWord';\n/*\r\n * There are 3 prop patterns used to build up the className for a component.\r\n * Each utility here is meant for use in a classnames() argument.\r\n *\r\n * There is no util for valueOnly() because it would simply return val.\r\n * Use the prop value inline instead.\r\n *   <Label size='big' />\r\n *   <div class=\"ui big label\"></div>\r\n */\n\n/**\r\n * Props where only the prop key is used in the className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label tag />\r\n * <div class=\"ui tag label\"></div>\r\n */\n\nexport var useKeyOnly = function useKeyOnly(val, key) {\n  return val && key;\n};\n/**\r\n * Props that require both a key and value to create a className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label corner='left' />\r\n * <div class=\"ui left corner label\"></div>\r\n */\n\nexport var useValueAndKey = function useValueAndKey(val, key) {\n  return val && val !== true && \"\".concat(val, \" \").concat(key);\n};\n/**\r\n * Props whose key will be used in className, or value and key.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example Key Only\r\n * <Label pointing />\r\n * <div class=\"ui pointing label\"></div>\r\n *\r\n * @example Key and Value\r\n * <Label pointing='left' />\r\n * <div class=\"ui left pointing label\"></div>\r\n */\n\nexport var useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\n  return val && (val === true ? key : \"\".concat(val, \" \").concat(key));\n}; //\n// Prop to className exceptions\n//\n\n/**\r\n * The \"multiple\" prop implements control of visibility and reserved classes for Grid subcomponents.\r\n *\r\n * @param {*} val The value of the \"multiple\" prop\r\n * @param {*} key A props key\r\n *\r\n * @example\r\n * <Grid.Row only='mobile' />\r\n * <Grid.Row only='mobile tablet' />\r\n * <div class=\"mobile only row\"></div>\r\n * <div class=\"mobile only tablet only row\"></div>\r\n */\n\nexport var useMultipleProp = function useMultipleProp(val, key) {\n  if (!val || val === true) return null;\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\n    return \"\".concat(prop.replace('-', ' '), \" \").concat(key);\n  }).join(' ');\n};\n/**\r\n * The \"textAlign\" prop follows the useValueAndKey except when the value is \"justified'.\r\n * In this case, only the class \"justified\" is used, ignoring the \"aligned\" class.\r\n * @param {*} val The value of the \"textAlign\" prop\r\n *\r\n * @example\r\n * <Container textAlign='justified' />\r\n * <div class=\"ui justified container\"></div>\r\n *\r\n * @example\r\n * <Container textAlign='left' />\r\n * <div class=\"ui left aligned container\"></div>\r\n */\n\nexport var useTextAlignProp = function useTextAlignProp(val) {\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\n};\n/**\r\n * The \"verticalAlign\" prop follows the useValueAndKey.\r\n *\r\n * @param {*} val The value of the \"verticalAlign\" prop\r\n *\r\n * @example\r\n * <Grid verticalAlign='middle' />\r\n * <div class=\"ui middle aligned grid\"></div>\r\n */\n\nexport var useVerticalAlignProp = function useVerticalAlignProp(val) {\n  return useValueAndKey(val, 'aligned');\n};\n/**\r\n * Create \"X\", \"X wide\" and \"equal width\" classNames.\r\n * \"X\" is a numberToWord value and \"wide\" is configurable.\r\n * @param {*} val The prop value\r\n * @param {string} [widthClass=''] The class\r\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \"equal\" value\r\n *\r\n * @example\r\n * <Grid columns='equal' />\r\n * <div class=\"ui equal width grid\"></div>\r\n *\r\n * <Form widths='equal' />\r\n * <div class=\"ui equal width form\"></div>\r\n *\r\n * <FieldGroup widths='equal' />\r\n * <div class=\"equal width fields\"></div>\r\n *\r\n * @example\r\n * <Grid columns={4} />\r\n * <div class=\"ui four column grid\"></div>\r\n */\n\nexport var useWidthProp = function useWidthProp(val) {\n  var widthClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var canEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (canEqual && val === 'equal') {\n    return 'equal width';\n  }\n\n  var valType = _typeof(val);\n\n  if ((valType === 'string' || valType === 'number') && widthClass) {\n    return \"\".concat(numberToWord(val), \" \").concat(widthClass);\n  }\n\n  return numberToWord(val);\n};","map":{"version":3,"sources":["D:/Tamir/Uni/3rd year/Project/StudyManagementProject/study-management-app/node_modules/semantic-ui-react/dist/es/lib/classNameBuilders.js"],"names":["_typeof","numberToWord","useKeyOnly","val","key","useValueAndKey","concat","useKeyOrValueAndKey","useMultipleProp","replace","split","map","prop","join","useTextAlignProp","useVerticalAlignProp","useWidthProp","widthClass","arguments","length","undefined","canEqual","valType"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/typeof\";\r\nimport { numberToWord } from './numberToWord';\r\n/*\r\n * There are 3 prop patterns used to build up the className for a component.\r\n * Each utility here is meant for use in a classnames() argument.\r\n *\r\n * There is no util for valueOnly() because it would simply return val.\r\n * Use the prop value inline instead.\r\n *   <Label size='big' />\r\n *   <div class=\"ui big label\"></div>\r\n */\r\n\r\n/**\r\n * Props where only the prop key is used in the className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label tag />\r\n * <div class=\"ui tag label\"></div>\r\n */\r\n\r\nexport var useKeyOnly = function useKeyOnly(val, key) {\r\n  return val && key;\r\n};\r\n/**\r\n * Props that require both a key and value to create a className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label corner='left' />\r\n * <div class=\"ui left corner label\"></div>\r\n */\r\n\r\nexport var useValueAndKey = function useValueAndKey(val, key) {\r\n  return val && val !== true && \"\".concat(val, \" \").concat(key);\r\n};\r\n/**\r\n * Props whose key will be used in className, or value and key.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example Key Only\r\n * <Label pointing />\r\n * <div class=\"ui pointing label\"></div>\r\n *\r\n * @example Key and Value\r\n * <Label pointing='left' />\r\n * <div class=\"ui left pointing label\"></div>\r\n */\r\n\r\nexport var useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\r\n  return val && (val === true ? key : \"\".concat(val, \" \").concat(key));\r\n}; //\r\n// Prop to className exceptions\r\n//\r\n\r\n/**\r\n * The \"multiple\" prop implements control of visibility and reserved classes for Grid subcomponents.\r\n *\r\n * @param {*} val The value of the \"multiple\" prop\r\n * @param {*} key A props key\r\n *\r\n * @example\r\n * <Grid.Row only='mobile' />\r\n * <Grid.Row only='mobile tablet' />\r\n * <div class=\"mobile only row\"></div>\r\n * <div class=\"mobile only tablet only row\"></div>\r\n */\r\n\r\nexport var useMultipleProp = function useMultipleProp(val, key) {\r\n  if (!val || val === true) return null;\r\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\r\n    return \"\".concat(prop.replace('-', ' '), \" \").concat(key);\r\n  }).join(' ');\r\n};\r\n/**\r\n * The \"textAlign\" prop follows the useValueAndKey except when the value is \"justified'.\r\n * In this case, only the class \"justified\" is used, ignoring the \"aligned\" class.\r\n * @param {*} val The value of the \"textAlign\" prop\r\n *\r\n * @example\r\n * <Container textAlign='justified' />\r\n * <div class=\"ui justified container\"></div>\r\n *\r\n * @example\r\n * <Container textAlign='left' />\r\n * <div class=\"ui left aligned container\"></div>\r\n */\r\n\r\nexport var useTextAlignProp = function useTextAlignProp(val) {\r\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\r\n};\r\n/**\r\n * The \"verticalAlign\" prop follows the useValueAndKey.\r\n *\r\n * @param {*} val The value of the \"verticalAlign\" prop\r\n *\r\n * @example\r\n * <Grid verticalAlign='middle' />\r\n * <div class=\"ui middle aligned grid\"></div>\r\n */\r\n\r\nexport var useVerticalAlignProp = function useVerticalAlignProp(val) {\r\n  return useValueAndKey(val, 'aligned');\r\n};\r\n/**\r\n * Create \"X\", \"X wide\" and \"equal width\" classNames.\r\n * \"X\" is a numberToWord value and \"wide\" is configurable.\r\n * @param {*} val The prop value\r\n * @param {string} [widthClass=''] The class\r\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \"equal\" value\r\n *\r\n * @example\r\n * <Grid columns='equal' />\r\n * <div class=\"ui equal width grid\"></div>\r\n *\r\n * <Form widths='equal' />\r\n * <div class=\"ui equal width form\"></div>\r\n *\r\n * <FieldGroup widths='equal' />\r\n * <div class=\"equal width fields\"></div>\r\n *\r\n * @example\r\n * <Grid columns={4} />\r\n * <div class=\"ui four column grid\"></div>\r\n */\r\n\r\nexport var useWidthProp = function useWidthProp(val) {\r\n  var widthClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\r\n  var canEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n\r\n  if (canEqual && val === 'equal') {\r\n    return 'equal width';\r\n  }\r\n\r\n  var valType = _typeof(val);\r\n\r\n  if ((valType === 'string' || valType === 'number') && widthClass) {\r\n    return \"\".concat(numberToWord(val), \" \").concat(widthClass);\r\n  }\r\n\r\n  return numberToWord(val);\r\n};"]},"metadata":{},"sourceType":"module"}