{"ast":null,"code":"var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n/**\r\n * An alternative to `_.reduce`; this method transforms `object` to a new\r\n * `accumulator` object which is the result of running each of its own\r\n * enumerable string keyed properties thru `iteratee`, with each invocation\r\n * potentially mutating the `accumulator` object. If `accumulator` is not\r\n * provided, a new object with the same `[[Prototype]]` will be used. The\r\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\r\n * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 1.3.0\r\n * @category Object\r\n * @param {Object} object The object to iterate over.\r\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n * @param {*} [accumulator] The custom accumulator value.\r\n * @returns {*} Returns the accumulated value.\r\n * @example\r\n *\r\n * _.transform([2, 3, 4], function(result, n) {\r\n *   result.push(n *= n);\r\n *   return n % 2 == 0;\r\n * }, []);\r\n * // => [4, 9]\r\n *\r\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\r\n *   (result[value] || (result[value] = [])).push(key);\r\n * }, {});\r\n * // => { '1': ['a', 'c'], '2': ['b'] }\r\n */\n\n\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n  iteratee = baseIteratee(iteratee, 4);\n\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor() : [];\n    } else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    } else {\n      accumulator = {};\n    }\n  }\n\n  (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;","map":{"version":3,"sources":["C:/Projects/StudyManagement/client/node_modules/lodash/transform.js"],"names":["arrayEach","require","baseCreate","baseForOwn","baseIteratee","getPrototype","isArray","isBuffer","isFunction","isObject","isTypedArray","transform","object","iteratee","accumulator","isArr","isArrLike","Ctor","constructor","value","index","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,UAAU,GAAGD,OAAO,CAAC,eAAD,CADxB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,eAAD,CAFxB;AAAA,IAGIG,YAAY,GAAGH,OAAO,CAAC,iBAAD,CAH1B;AAAA,IAIII,YAAY,GAAGJ,OAAO,CAAC,iBAAD,CAJ1B;AAAA,IAKIK,OAAO,GAAGL,OAAO,CAAC,WAAD,CALrB;AAAA,IAMIM,QAAQ,GAAGN,OAAO,CAAC,YAAD,CANtB;AAAA,IAOIO,UAAU,GAAGP,OAAO,CAAC,cAAD,CAPxB;AAAA,IAQIQ,QAAQ,GAAGR,OAAO,CAAC,YAAD,CARtB;AAAA,IASIS,YAAY,GAAGT,OAAO,CAAC,gBAAD,CAT1B;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASU,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,WAArC,EAAkD;AAChD,MAAIC,KAAK,GAAGT,OAAO,CAACM,MAAD,CAAnB;AAAA,MACII,SAAS,GAAGD,KAAK,IAAIR,QAAQ,CAACK,MAAD,CAAjB,IAA6BF,YAAY,CAACE,MAAD,CADzD;AAGAC,EAAAA,QAAQ,GAAGT,YAAY,CAACS,QAAD,EAAW,CAAX,CAAvB;;AACA,MAAIC,WAAW,IAAI,IAAnB,EAAyB;AACvB,QAAIG,IAAI,GAAGL,MAAM,IAAIA,MAAM,CAACM,WAA5B;;AACA,QAAIF,SAAJ,EAAe;AACbF,MAAAA,WAAW,GAAGC,KAAK,GAAG,IAAIE,IAAJ,EAAH,GAAc,EAAjC;AACD,KAFD,MAGK,IAAIR,QAAQ,CAACG,MAAD,CAAZ,EAAsB;AACzBE,MAAAA,WAAW,GAAGN,UAAU,CAACS,IAAD,CAAV,GAAmBf,UAAU,CAACG,YAAY,CAACO,MAAD,CAAb,CAA7B,GAAsD,EAApE;AACD,KAFI,MAGA;AACHE,MAAAA,WAAW,GAAG,EAAd;AACD;AACF;;AACD,GAACE,SAAS,GAAGhB,SAAH,GAAeG,UAAzB,EAAqCS,MAArC,EAA6C,UAASO,KAAT,EAAgBC,KAAhB,EAAuBR,MAAvB,EAA+B;AAC1E,WAAOC,QAAQ,CAACC,WAAD,EAAcK,KAAd,EAAqBC,KAArB,EAA4BR,MAA5B,CAAf;AACD,GAFD;AAGA,SAAOE,WAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBX,SAAjB","sourcesContent":["var arrayEach = require('./_arrayEach'),\r\n    baseCreate = require('./_baseCreate'),\r\n    baseForOwn = require('./_baseForOwn'),\r\n    baseIteratee = require('./_baseIteratee'),\r\n    getPrototype = require('./_getPrototype'),\r\n    isArray = require('./isArray'),\r\n    isBuffer = require('./isBuffer'),\r\n    isFunction = require('./isFunction'),\r\n    isObject = require('./isObject'),\r\n    isTypedArray = require('./isTypedArray');\r\n\r\n/**\r\n * An alternative to `_.reduce`; this method transforms `object` to a new\r\n * `accumulator` object which is the result of running each of its own\r\n * enumerable string keyed properties thru `iteratee`, with each invocation\r\n * potentially mutating the `accumulator` object. If `accumulator` is not\r\n * provided, a new object with the same `[[Prototype]]` will be used. The\r\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\r\n * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 1.3.0\r\n * @category Object\r\n * @param {Object} object The object to iterate over.\r\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n * @param {*} [accumulator] The custom accumulator value.\r\n * @returns {*} Returns the accumulated value.\r\n * @example\r\n *\r\n * _.transform([2, 3, 4], function(result, n) {\r\n *   result.push(n *= n);\r\n *   return n % 2 == 0;\r\n * }, []);\r\n * // => [4, 9]\r\n *\r\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\r\n *   (result[value] || (result[value] = [])).push(key);\r\n * }, {});\r\n * // => { '1': ['a', 'c'], '2': ['b'] }\r\n */\r\nfunction transform(object, iteratee, accumulator) {\r\n  var isArr = isArray(object),\r\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\r\n\r\n  iteratee = baseIteratee(iteratee, 4);\r\n  if (accumulator == null) {\r\n    var Ctor = object && object.constructor;\r\n    if (isArrLike) {\r\n      accumulator = isArr ? new Ctor : [];\r\n    }\r\n    else if (isObject(object)) {\r\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\r\n    }\r\n    else {\r\n      accumulator = {};\r\n    }\r\n  }\r\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\r\n    return iteratee(accumulator, value, index, object);\r\n  });\r\n  return accumulator;\r\n}\r\n\r\nmodule.exports = transform;\r\n"]},"metadata":{},"sourceType":"script"}