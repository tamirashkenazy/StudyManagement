{"ast":null,"code":"var constant = require('./constant'),\n    createInverter = require('./_createInverter'),\n    identity = require('./identity');\n/** Used for built-in method references. */\n\n\nvar objectProto = Object.prototype;\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\n\nvar nativeObjectToString = objectProto.toString;\n/**\r\n * Creates an object composed of the inverted keys and values of `object`.\r\n * If `object` contains duplicate values, subsequent values overwrite\r\n * property assignments of previous values.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.7.0\r\n * @category Object\r\n * @param {Object} object The object to invert.\r\n * @returns {Object} Returns the new inverted object.\r\n * @example\r\n *\r\n * var object = { 'a': 1, 'b': 2, 'c': 1 };\r\n *\r\n * _.invert(object);\r\n * // => { '1': 'c', '2': 'b' }\r\n */\n\nvar invert = createInverter(function (result, value, key) {\n  if (value != null && typeof value.toString != 'function') {\n    value = nativeObjectToString.call(value);\n  }\n\n  result[value] = key;\n}, constant(identity));\nmodule.exports = invert;","map":{"version":3,"sources":["C:/Projects/StudyManagement/client/node_modules/lodash/invert.js"],"names":["constant","require","createInverter","identity","objectProto","Object","prototype","nativeObjectToString","toString","invert","result","value","key","call","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;AAAA,IACIC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAD5B;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAFtB;AAIA;;;AACA,IAAIG,WAAW,GAAGC,MAAM,CAACC,SAAzB;AAEA;;;;;;AAKA,IAAIC,oBAAoB,GAAGH,WAAW,CAACI,QAAvC;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,IAAIC,MAAM,GAAGP,cAAc,CAAC,UAASQ,MAAT,EAAiBC,KAAjB,EAAwBC,GAAxB,EAA6B;AACvD,MAAID,KAAK,IAAI,IAAT,IACA,OAAOA,KAAK,CAACH,QAAb,IAAyB,UAD7B,EACyC;AACvCG,IAAAA,KAAK,GAAGJ,oBAAoB,CAACM,IAArB,CAA0BF,KAA1B,CAAR;AACD;;AAEDD,EAAAA,MAAM,CAACC,KAAD,CAAN,GAAgBC,GAAhB;AACD,CAP0B,EAOxBZ,QAAQ,CAACG,QAAD,CAPgB,CAA3B;AASAW,MAAM,CAACC,OAAP,GAAiBN,MAAjB","sourcesContent":["var constant = require('./constant'),\r\n    createInverter = require('./_createInverter'),\r\n    identity = require('./identity');\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString = objectProto.toString;\r\n\r\n/**\r\n * Creates an object composed of the inverted keys and values of `object`.\r\n * If `object` contains duplicate values, subsequent values overwrite\r\n * property assignments of previous values.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.7.0\r\n * @category Object\r\n * @param {Object} object The object to invert.\r\n * @returns {Object} Returns the new inverted object.\r\n * @example\r\n *\r\n * var object = { 'a': 1, 'b': 2, 'c': 1 };\r\n *\r\n * _.invert(object);\r\n * // => { '1': 'c', '2': 'b' }\r\n */\r\nvar invert = createInverter(function(result, value, key) {\r\n  if (value != null &&\r\n      typeof value.toString != 'function') {\r\n    value = nativeObjectToString.call(value);\r\n  }\r\n\r\n  result[value] = key;\r\n}, constant(identity));\r\n\r\nmodule.exports = invert;\r\n"]},"metadata":{},"sourceType":"script"}